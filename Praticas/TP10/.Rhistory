library(arules)
install.packages("arules")
install.packages("arulesViz")
library(arules)
Groceries
library(arulesViz)
Groceries
data("Groceries")
data(Groceries)
View(Groceries)
class(Groceries)
Groceries
summary
summary(Groceries)
inspect(Groceries)
inspect(Groceries[1:10])
size(Groceries)
boxplot(size(Groceries))
Groceries
unique(Groceries)
itemInfo(Groceries)
itemFrequency(Groceries)
itemFrequency(Groceries, type="absolute")
itemFrequencyPlot(Groceries, topN=5)
itemFrequencyPlot(Groceries, support=0.1)
fsets <- apriori(Groceries, parameter=list(supp=0.1,target="frequent itemsets"))
fsets
class(fsets)
inspect(fsets)
fsets <- apriori(Groceries, parameter=list(supp=0.01, minlen=1,target="frequent itemsets"))
inspect(fsets[1:10])
inspect(sort(fsets[1:10])
)
inspect(sort(fsets[1:10]))
fsets
fsets <- apriori(Groceries, parameter=list(supp=0.01, minlen=1,target="frequent itemsets"))
fsets <- apriori(Groceries, parameter=list(supp=0.01, minlen=2,target="frequent itemsets"))
inspect(sort(fsets)[1:10])
fsets <- apriori(Groceries, parameter=list(supp=0.01, minlen=1,target="frequent itemsets"))
inspect(sort(fsets)[1:10])
quality(fsets)
fsetsclosed <- fsets[is.closed(fsets)]
fsets
fsetsclosed
fsetmax <- fsets[is.maximal(fsets)]
fsetsmax
fsetmax
inspect(fsetmax[1:5])
rules <- apriori(Groceries)
rules
rules <- apriori(Groceries, parameter=list(supp=0.01, conf=0.5))
summary(rules)
inspect(rules)
rules <- apriori(Groceries, parameter=list(supp=0.01, conf=0.25))
summary(rules)
inspect(rules)
inspect(rules)[1:5]
inspect(rules)[1:5]
rules.sub <- subset(rules, subset=lisft>2)
rules.sub <- subset(rules, subset=lift>2)
rules.sub
inspect(rules.sub)
rules.sub <- subset(rules, subset=rhs %in% c("yogurt", "whole milk") & lift>2)
rules.sort <- sort(rules.sub, by="lift")
inspect(rules.sort)
plot(rules.sort)
plot(rules.sort, method="graph")
plot(rules.sort, method="grouped")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
setwd("D:\U. Porto\4 ano\1 semestre\Aprendizagem Computacional\Praticas")
setwd("D:/U. Porto/4 ano/1 semestre/Aprendizagem Computacional/Praticas")
df <- read_csv('german_credit.csv')
install.packages("tidyverse")
install.packages("recommendelab")
install.packages("recommenderlab")
install.packages("readr")
library(recommenderlab)
library(dplyr)
library(readr)
setwd("D:/U. Porto/4 ano/1 semestre/Aprendizagem Computacional/Praticas")
log <- read_csv("log1.csv",col_types = list(col_factor(),col_factor()))
log
brm_offline <- brm[1:6,]
brm <- as(as.data.frame(log), "binaryRatingMatrix")
brm_offline <- brm[1:6,]
getData.frame(brm_offline)
getRatingMatrix(brm_offline)
inspect(getRatingMatrix(brm_offline))
rowCounts(brm_offline)
colCOunts(brm_offline)
colCounts(brm_offline)
image(brm_offline)
model <- Recommender(brm_offline, "AR")
getModel(model)
rules <- getModel(model)$rule_base
inspect(rules)
brm_u7 <- brm[7,]
brm_u7
getRatingMatrix(brm_u7)
inspect(getRatingMatrix(brm_u7))
recsAR <- predict(model, brm_u7, n=2)
recsAR
getList(recsAR)
r <- subset(rules, lhs %in% c("C", "F"))
inspect(r)
simJac_users <- similarity(brm_offline, method="jaccard")
simJac_users
simCos_users <- similarity(brm_offline, method="cosine")
simCos_users
simCos_items <- similarity(brm_offline, method="cosine", which="items")
